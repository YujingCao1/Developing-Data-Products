row.names(myAdjdata)=Adjacency[,1]
a1=array(0,dim=c(31,31,2))
w=apply(myAdjdata,FUN=sum,MARGIN=1)
w=sqrt(w)
#A function to calculate
Beta=function(w,Adj,tau1,tau0){
BetaArray=array(0,dim=c(31,31,2))
for(i in 1:dim(Adj)[1]){
for(j in 1:dim(Adj)[1]){
BetaArray[i,j,1]=(w[i]+w[j])*tau1*Adj[i,j]
BetaArray[i,j,2]=-(w[i]+w[j])*tau0*Adj[i,j]
}
}
return(BetaArray)
}
BetaArray=Beta(w,myAdjdata,tau1=0.25,tau0=0.05)
LogitGibbs_prior=function(InitialS,h,Beta,num_iter){
#Empty matrix to store values of S
Sdisease=matrix(data=NA,nrow=num_iter,ncol=31)
logitp=matrix(data=NA,nrow=num_iter,ncol=31)
Sdisease[1,]=Initials
for (k in 1:num_iter){
if (k>1){
Sdisease[k,]=Sdisease[k-1,]
}
for (i in 1:31){
BetaTemp=Beta[i,,1]*((1+Sdisease[k,])/2)+Beta[i,,2]*((1-Sdisease[k,])/2)
logitp[k,i]=as.numeric(h+t(Sdisease[k,])%*%as.matrix(BetaTemp,1,31))
Sdisease[k,i]=2*rbinom(1,1,exp(logitp[k,i])/(1+exp(logitp[k,i])))-1
}
}
return(Sdisease)
}
Initials=rbinom(31,1,0.5)
S_beta1=LogitGibbs_prior(Initials,h=-3,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.7)
S_beta2=LogitGibbs_prior(Initials2,h=-3,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.3)
S_beta3=LogitGibbs_prior(Initials3,h=-3,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.2)
S_beta4=LogitGibbs_prior(Initials4,h=-3,Beta=BetaArray,num_iter=10000)
##################### values of S's###########################
#Four MCMC Chains for values of S's
Gibbs.draws1.S=mcmc((S_beta1[2501:10000,]==1)+0,thin=4)
Gibbs.draws2.S=mcmc((S_beta2[2501:10000,]==1)+0,thin=4)
Gibbs.draws3.S=mcmc((S_beta3[2501:10000,]==1)+0,thin=4)
Gibbs.draws4.S=mcmc((S_beta4[2501:10000,]==1)+0,thin=4)
Gibbs.draws1.S1=mcmc(S_beta1[2501:10000,],thin=4)
Gibbs.draws2.S2=mcmc(S_beta2[2501:10000,],thin=4)
Gibbs.draws3.S3=mcmc(S_beta3[2501:10000,],thin=4)
Gibbs.draws4.S4=mcmc(S_beta4[2501:10000,],thin=4)
summary(Gibbs.draws1.S)
apply((S_beta1[2501:10000,][c(T,F,F,F),]==1)+0,2,mean)
#Gibbs mcmc list
Gibbs.list.S=mcmc.list(list(Gibbs.draws1.S,Gibbs.draws2.S,Gibbs.draws3.S,Gibbs.draws4.S))
#Summary
summary(Gibbs.list.S)
#Gelman-Rubin test to check the convergence
gelman.diag(Gibbs.list.S)
#multivariate psrf is 1, so Gibbs.draws1.S converges
#Calculate prior probability of S=1, count the number of edges,not length.
mean1.S=sum(Gibbs.draws1.S==1)/length(Gibbs.draws1.S)
mean2.S=sum(Gibbs.draws2.S==1)/length(Gibbs.draws1.S)
mean3.S=sum(Gibbs.draws3.S==1)/length(Gibbs.draws1.S)
mean4.S=sum(Gibbs.draws4.S==1)/length(Gibbs.draws1.S)
priormean.S=sum(mean1.S,mean2.S,mean3.S,mean4.S)/4
priormean.S
counts11=function(param){
count1=0
for (m in 1:dim(param)[1]){
for (i in 1:31){
for (j in 1:31){
if(myAdjdata[i,j]==1 & param[m,i]==1 & param[m,j]==1){
count1=count1+1
}
}
}
return(count1)
}
}
countsSvalue1=counts11(Gibbs.draws1.S)/sum(myAdjdata)
countsSvalue2=counts11(Gibbs.draws2.S)/sum(myAdjdata)
countsSvalue3=counts11(Gibbs.draws3.S)/sum(myAdjdata)
countsSvalue4=counts11(Gibbs.draws4.S)/sum(myAdjdata)
countsSvalues11=sum(countsSvalue1,countsSvalue2,countsSvalue3,countsSvalue4)/4
counts00=function(param){
count1=0
for (m in 1:dim(param)[1]){
for (i in 1:31){
for (j in 1:31){
if(myAdjdata[i,j]==1 & param[m,i]==0 & param[m,j]==0){
count1=count1+1
}
}
}
return(count1)
}
}
counts0Svalue1=counts00(Gibbs.draws1.S)/sum(myAdjdata)
counts0Svalue2=counts00(Gibbs.draws2.S)/sum(myAdjdata)
counts0Svalue3=counts00(Gibbs.draws3.S)/sum(myAdjdata)
counts0Svalue4=counts00(Gibbs.draws4.S)/sum(myAdjdata)
countsSvalues00=sum(counts0Svalue1,counts0Svalue2,counts0Svalue3,counts0Svalue4)/4
countsSvalues11
countsSvalues00
library(lattice)
library(coda)
set.seed(2015)
#get list of nodes
Adjacencydata=Adjacency[1:31,2:32]
Adjdata=as.matrix(Adjacencydata)
myAdjdata=as.matrix(Adjdata,header=TRUE)
row.names(myAdjdata)=Adjacency[,1]
a1=array(0,dim=c(31,31,2))
w=apply(myAdjdata,FUN=sum,MARGIN=1)
w=sqrt(w)
#A function to calculate
Beta=function(w,Adj,tau1,tau0){
BetaArray=array(0,dim=c(31,31,2))
for(i in 1:dim(Adj)[1]){
for(j in 1:dim(Adj)[1]){
BetaArray[i,j,1]=(w[i]+w[j])*tau1*Adj[i,j]
BetaArray[i,j,2]=-(w[i]+w[j])*tau0*Adj[i,j]
}
}
return(BetaArray)
}
BetaArray=Beta(w,myAdjdata,tau1=0.1,tau0=0.01)
Initials=rbinom(31,1,0.5)
S_beta1=LogitGibbs_prior(Initials,h=-1.5,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.7)
S_beta2=LogitGibbs_prior(Initials2,h=-1.5,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.3)
S_beta3=LogitGibbs_prior(Initials3,h=-1.5,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.2)
S_beta4=LogitGibbs_prior(Initials4,h=-1.5,Beta=BetaArray,num_iter=10000)
Gibbs.draws1.S=mcmc((S_beta1[2501:10000,]==1)+0,thin=4)
Gibbs.draws2.S=mcmc((S_beta2[2501:10000,]==1)+0,thin=4)
Gibbs.draws3.S=mcmc((S_beta3[2501:10000,]==1)+0,thin=4)
Gibbs.draws4.S=mcmc((S_beta4[2501:10000,]==1)+0,thin=4)
Gibbs.draws1.S1=mcmc(S_beta1[2501:10000,],thin=4)
Gibbs.draws2.S2=mcmc(S_beta2[2501:10000,],thin=4)
Gibbs.draws3.S3=mcmc(S_beta3[2501:10000,],thin=4)
Gibbs.draws4.S4=mcmc(S_beta4[2501:10000,],thin=4)
summary(Gibbs.draws1.S)
apply((S_beta1[2501:10000,][c(T,F,F,F),]==1)+0,2,mean)
#Gibbs mcmc list
Gibbs.list.S=mcmc.list(list(Gibbs.draws1.S,Gibbs.draws2.S,Gibbs.draws3.S,Gibbs.draws4.S))
#Summary
summary(Gibbs.list.S)
#Gelman-Rubin test to check the convergence
gelman.diag(Gibbs.list.S)
#multivariate psrf is 1, so Gibbs.draws1.S converges
#Calculate prior probability of S=1, count the number of edges,not length.
mean1.S=sum(Gibbs.draws1.S==1)/length(Gibbs.draws1.S)
mean2.S=sum(Gibbs.draws2.S==1)/length(Gibbs.draws1.S)
mean3.S=sum(Gibbs.draws3.S==1)/length(Gibbs.draws1.S)
mean4.S=sum(Gibbs.draws4.S==1)/length(Gibbs.draws1.S)
priormean.S=sum(mean1.S,mean2.S,mean3.S,mean4.S)/4
priormean.S
counts11=function(param){
count1=0
for (m in 1:dim(param)[1]){
for (i in 1:31){
for (j in 1:31){
if(myAdjdata[i,j]==1 & param[m,i]==1 & param[m,j]==1){
count1=count1+1
}
}
}
return(count1)
}
}
countsSvalue1=counts11(Gibbs.draws1.S)/sum(myAdjdata)
countsSvalue2=counts11(Gibbs.draws2.S)/sum(myAdjdata)
countsSvalue3=counts11(Gibbs.draws3.S)/sum(myAdjdata)
countsSvalue4=counts11(Gibbs.draws4.S)/sum(myAdjdata)
countsSvalues11=sum(countsSvalue1,countsSvalue2,countsSvalue3,countsSvalue4)/4
countsSvalues11
counts00=function(param){
count1=0
for (m in 1:dim(param)[1]){
for (i in 1:31){
for (j in 1:31){
if(myAdjdata[i,j]==1 & param[m,i]==0 & param[m,j]==0){
count1=count1+1
}
}
}
return(count1)
}
}
counts0Svalue1=counts00(Gibbs.draws1.S)/sum(myAdjdata)
counts0Svalue2=counts00(Gibbs.draws2.S)/sum(myAdjdata)
counts0Svalue3=counts00(Gibbs.draws3.S)/sum(myAdjdata)
counts0Svalue4=counts00(Gibbs.draws4.S)/sum(myAdjdata)
countsSvalues00=sum(counts0Svalue1,counts0Svalue2,counts0Svalue3,counts0Svalue4)/4
countsSvalues00
library(lattice)
library(coda)
set.seed(2015)
#get list of nodes
Adjacencydata=Adjacency[1:31,2:32]
Adjdata=as.matrix(Adjacencydata)
myAdjdata=as.matrix(Adjdata,header=TRUE)
row.names(myAdjdata)=Adjacency[,1]
a1=array(0,dim=c(31,31,2))
w=apply(myAdjdata,FUN=sum,MARGIN=1)
w=sqrt(w)
#A function to calculate
Beta=function(w,Adj,tau1,tau0){
BetaArray=array(0,dim=c(31,31,2))
for(i in 1:dim(Adj)[1]){
for(j in 1:dim(Adj)[1]){
BetaArray[i,j,1]=(w[i]+w[j])*tau1*Adj[i,j]
BetaArray[i,j,2]=-(w[i]+w[j])*tau0*Adj[i,j]
}
}
return(BetaArray)
}
BetaArray=Beta(w,myAdjdata,tau1=0.25,tau0=0.1)
LogitGibbs_prior=function(InitialS,h,Beta,num_iter){
#Empty matrix to store values of S
Sdisease=matrix(data=NA,nrow=num_iter,ncol=31)
logitp=matrix(data=NA,nrow=num_iter,ncol=31)
Sdisease[1,]=Initials
for (k in 1:num_iter){
if (k>1){
Sdisease[k,]=Sdisease[k-1,]
}
for (i in 1:31){
BetaTemp=Beta[i,,1]*((1+Sdisease[k,])/2)+Beta[i,,2]*((1-Sdisease[k,])/2)
logitp[k,i]=as.numeric(h+t(Sdisease[k,])%*%as.matrix(BetaTemp,1,31))
Sdisease[k,i]=2*rbinom(1,1,exp(logitp[k,i])/(1+exp(logitp[k,i])))-1
}
}
return(Sdisease)
}
Initials=rbinom(31,1,0.5)
S_beta1=LogitGibbs_prior(Initials,h=-2,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.7)
S_beta2=LogitGibbs_prior(Initials2,h=-2,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.3)
S_beta3=LogitGibbs_prior(Initials3,h=-2,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.2)
S_beta4=LogitGibbs_prior(Initials4,h=-2,Beta=BetaArray,num_iter=10000)
##################### values of S's###########################
#Four MCMC Chains for values of S's
Gibbs.draws1.S=mcmc((S_beta1[2501:10000,]==1)+0,thin=4)
Gibbs.draws2.S=mcmc((S_beta2[2501:10000,]==1)+0,thin=4)
Gibbs.draws3.S=mcmc((S_beta3[2501:10000,]==1)+0,thin=4)
Gibbs.draws4.S=mcmc((S_beta4[2501:10000,]==1)+0,thin=4)
Gibbs.draws1.S1=mcmc(S_beta1[2501:10000,],thin=4)
Gibbs.draws2.S2=mcmc(S_beta2[2501:10000,],thin=4)
Gibbs.draws3.S3=mcmc(S_beta3[2501:10000,],thin=4)
Gibbs.draws4.S4=mcmc(S_beta4[2501:10000,],thin=4)
summary(Gibbs.draws1.S)
apply((S_beta1[2501:10000,][c(T,F,F,F),]==1)+0,2,mean)
#Gibbs mcmc list
Gibbs.list.S=mcmc.list(list(Gibbs.draws1.S,Gibbs.draws2.S,Gibbs.draws3.S,Gibbs.draws4.S))
#Summary
summary(Gibbs.list.S)
#Gelman-Rubin test to check the convergence
gelman.diag(Gibbs.list.S)
mean1.S=sum(Gibbs.draws1.S==1)/length(Gibbs.draws1.S)
mean2.S=sum(Gibbs.draws2.S==1)/length(Gibbs.draws1.S)
mean3.S=sum(Gibbs.draws3.S==1)/length(Gibbs.draws1.S)
mean4.S=sum(Gibbs.draws4.S==1)/length(Gibbs.draws1.S)
priormean.S=sum(mean1.S,mean2.S,mean3.S,mean4.S)/4
priormean.S
#Calculate prior probability of S(i)=S(j)=1 or s(i)=s(j)=0
counts11=function(param){
count1=0
for (m in 1:dim(param)[1]){
for (i in 1:31){
for (j in 1:31){
if(myAdjdata[i,j]==1 & param[m,i]==1 & param[m,j]==1){
count1=count1+1
}
}
}
}
}
countsSvalue1=counts11(Gibbs.draws1.S)/sum(myAdjdata)
counts11=function(param){
count1=0
for (m in 1:dim(param)[1]){
for (i in 1:31){
for (j in 1:31){
if(myAdjdata[i,j]==1 & param[m,i]==1 & param[m,j]==1){
count1=count1+1
}
}
}
return(count1)
}
}
countsSvalue1=counts11(Gibbs.draws1.S)/sum(myAdjdata)
countsSvalue2=counts11(Gibbs.draws2.S)/sum(myAdjdata)
countsSvalue3=counts11(Gibbs.draws3.S)/sum(myAdjdata)
countsSvalue4=counts11(Gibbs.draws4.S)/sum(myAdjdata)
countsSvalues11=sum(countsSvalue1,countsSvalue2,countsSvalue3,countsSvalue4)/4
countsSvalues11
counts00=function(param){
count1=0
for (m in 1:dim(param)[1]){
for (i in 1:31){
for (j in 1:31){
if(myAdjdata[i,j]==1 & param[m,i]==0 & param[m,j]==0){
count1=count1+1
}
}
}
return(count1)
}
}
counts0Svalue1=counts00(Gibbs.draws1.S)/sum(myAdjdata)
counts0Svalue2=counts00(Gibbs.draws2.S)/sum(myAdjdata)
counts0Svalue3=counts00(Gibbs.draws3.S)/sum(myAdjdata)
counts0Svalue4=counts00(Gibbs.draws4.S)/sum(myAdjdata)
countsSvalues00=sum(counts0Svalue1,counts0Svalue2,counts0Svalue3,counts0Svalue4)/4
countsSvalues00
Initials=rbinom(31,1,0.5)
S_beta1=LogitGibbs_prior(Initials,h=-3,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.7)
S_beta2=LogitGibbs_prior(Initials2,h=-3,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.3)
S_beta3=LogitGibbs_prior(Initials3,h=-3,Beta=BetaArray,num_iter=10000)
Initials=rbinom(31,1,0.2)
S_beta4=LogitGibbs_prior(Initials4,h=-3,Beta=BetaArray,num_iter=10000)
Gibbs.draws1.S=mcmc((S_beta1[2501:10000,]==1)+0,thin=4)
Gibbs.draws2.S=mcmc((S_beta2[2501:10000,]==1)+0,thin=4)
Gibbs.draws3.S=mcmc((S_beta3[2501:10000,]==1)+0,thin=4)
Gibbs.draws4.S=mcmc((S_beta4[2501:10000,]==1)+0,thin=4)
Gibbs.draws1.S1=mcmc(S_beta1[2501:10000,],thin=4)
Gibbs.draws2.S2=mcmc(S_beta2[2501:10000,],thin=4)
Gibbs.draws3.S3=mcmc(S_beta3[2501:10000,],thin=4)
Gibbs.draws4.S4=mcmc(S_beta4[2501:10000,],thin=4)
summary(Gibbs.draws1.S)
apply((S_beta1[2501:10000,][c(T,F,F,F),]==1)+0,2,mean)
#Gibbs mcmc list
Gibbs.list.S=mcmc.list(list(Gibbs.draws1.S,Gibbs.draws2.S,Gibbs.draws3.S,Gibbs.draws4.S))
#Summary
summary(Gibbs.list.S)
#Gelman-Rubin test to check the convergence
gelman.diag(Gibbs.list.S)
#multivariate psrf is 1, so Gibbs.draws1.S converges
#Calculate prior probability of S=1, count the number of edges,not length.
mean1.S=sum(Gibbs.draws1.S==1)/length(Gibbs.draws1.S)
mean2.S=sum(Gibbs.draws2.S==1)/length(Gibbs.draws1.S)
mean3.S=sum(Gibbs.draws3.S==1)/length(Gibbs.draws1.S)
mean4.S=sum(Gibbs.draws4.S==1)/length(Gibbs.draws1.S)
priormean.S=sum(mean1.S,mean2.S,mean3.S,mean4.S)/4
priormean.S
#Calculate prior probability of S(i)=S(j)=1 or s(i)=s(j)=0
counts11=function(param){
count1=0
for (m in 1:dim(param)[1]){
for (i in 1:31){
for (j in 1:31){
if(myAdjdata[i,j]==1 & param[m,i]==1 & param[m,j]==1){
count1=count1+1
}
}
}
return(count1)
}
}
countsSvalue1=counts11(Gibbs.draws1.S)/sum(myAdjdata)
countsSvalue2=counts11(Gibbs.draws2.S)/sum(myAdjdata)
countsSvalue3=counts11(Gibbs.draws3.S)/sum(myAdjdata)
countsSvalue4=counts11(Gibbs.draws4.S)/sum(myAdjdata)
countsSvalues11=sum(countsSvalue1,countsSvalue2,countsSvalue3,countsSvalue4)/4
library(method)
library(methods)
install.packages("DDPQuiz3")
library(DDPQuiz3)
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel('Cell Body Segmentation'),
sidebarPanel(
numericInput('TotalIntenCh2', 'TotalIntenCh2', value=0),
numericInput('FiberWidthCh1', 'FiberWidthCh1', value=0),
submitButton('Submit'),
h3('Backgroud'),
p('The dataset "segmentationOriginal" from R package "AppliedPredictiveModeling" was used to build this shiny App.'),
p('Hill, LaPan, Li and Haney (2007) develop models to predict which cells in a high content screen were well segmented.'),
p('The data consists of 119 imaging measurements on 2019. The original analysis used 1009 for training and 1010 as a test set.')
),
mainPanel(
p('The outcome would show which cells in a high content screen were well segmented.'),
p('There are two different kinds of outcomes:'),
tags$div(
tags$ul(
tags$li('PS : Poorly Segmented'),
tags$li('WS : Well Segmented')
)
),
h4('Taking into account the values entered by you:'),
p('TotalIntenCh2:'),
verbatimTextOutput("inputTotalIntenCh2value"),
p('FiberWidthCh1:'),
verbatimTextOutput("inputFiberWidthCh1value"),
h4('The cells in a high content screen were'),
verbatimTextOutput("diagnostic"),
plotOutput('plot1')
)
)
)
shiny::runApp('C:/Users/y6u/Desktop/Developing Data Product/CellBodySegmentation')
setwd("C:/Users/y6u/Desktop/Developing Data Product/CellBodySegmentation")
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel('Cell Body Segmentation'),
sidebarPanel(
numericInput('TotalIntenCh2', 'TotalIntenCh2', value=0),
numericInput('FiberWidthCh1', 'FiberWidthCh1', value=0),
submitButton('Submit'),
h3('Backgroud'),
p('The dataset "segmentationOriginal" from R package "AppliedPredictiveModeling" was used to build this shiny App.'),
p('Hill, LaPan, Li and Haney (2007) develop models to predict which cells in a high content screen were well segmented.'),
p('The data consists of 119 imaging measurements on 2019. The original analysis used 1009 for training and 1010 as a test set.')
),
mainPanel(
p('The outcome would show which cells in a high content screen were well segmented.'),
p('There are two different kinds of outcomes:'),
tags$div(
tags$ul(
tags$li('PS : Poorly Segmented'),
tags$li('WS : Well Segmented')
)
),
h4('Taking into account the values entered by you:'),
p('TotalIntenCh2:'),
verbatimTextOutput("inputTotalIntenCh2value"),
p('FiberWidthCh1:'),
verbatimTextOutput("inputFiberWidthCh1value"),
h4('The cells in a high content screen were'),
verbatimTextOutput("diagnostic")
plotOutput(plot1)
)
)
)
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel('Cell Body Segmentation'),
sidebarPanel(
numericInput('TotalIntenCh2', 'TotalIntenCh2', value=0),
numericInput('FiberWidthCh1', 'FiberWidthCh1', value=0),
submitButton('Submit'),
h3('Backgroud'),
p('The dataset "segmentationOriginal" from R package "AppliedPredictiveModeling" was used to build this shiny App.'),
p('Hill, LaPan, Li and Haney (2007) develop models to predict which cells in a high content screen were well segmented.'),
p('The data consists of 119 imaging measurements on 2019. The original analysis used 1009 for training and 1010 as a test set.')
),
mainPanel(
p('The outcome would show which cells in a high content screen were well segmented.'),
p('There are two different kinds of outcomes:'),
tags$div(
tags$ul(
tags$li('PS : Poorly Segmented'),
tags$li('WS : Well Segmented')
)
),
h4('Taking into account the values entered by you:'),
p('TotalIntenCh2:'),
verbatimTextOutput("inputTotalIntenCh2value"),
p('FiberWidthCh1:'),
verbatimTextOutput("inputFiberWidthCh1value"),
h4('The cells in a high content screen were'),
verbatimTextOutput("diagnostic"),
plotOutput(plot1)
)
)
)
library(shiny)
shinyUI(
pageWithSidebar(
headerPanel('Cell Body Segmentation'),
sidebarPanel(
numericInput('TotalIntenCh2', 'TotalIntenCh2', value=0),
numericInput('FiberWidthCh1', 'FiberWidthCh1', value=0),
submitButton('Submit'),
h3('Backgroud'),
p('The dataset "segmentationOriginal" from R package "AppliedPredictiveModeling" was used to build this shiny App.'),
p('Hill, LaPan, Li and Haney (2007) develop models to predict which cells in a high content screen were well segmented.'),
p('The data consists of 119 imaging measurements on 2019. The original analysis used 1009 for training and 1010 as a test set.')
),
mainPanel(
p('The outcome would show which cells in a high content screen were well segmented.'),
p('There are two different kinds of outcomes:'),
tags$div(
tags$ul(
tags$li('PS : Poorly Segmented'),
tags$li('WS : Well Segmented')
)
),
h4('Taking into account the values entered by you:'),
p('TotalIntenCh2:'),
verbatimTextOutput("inputTotalIntenCh2value"),
p('FiberWidthCh1:'),
verbatimTextOutput("inputFiberWidthCh1value"),
h4('The cells in a high content screen were'),
verbatimTextOutput("diagnostic"),
plotOutput('plot1')
)
)
)
shiny::runApp()
